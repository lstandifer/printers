# MKS Robin Nano V2 Byï¼šzzcat
[include timelapse.cfg]
# STM32F103. When running "make menuconfig", enable "extra low-level
# configuration setup", select the 28KiB bootloader, and serial (on
# USART3 PB11/PB10) communication.

# Note that the "make flash" command does not work with MKS Robin
# boards. After running "make", run the following command:
#   ./scripts/update_mks_robin.py out/klipper.bin out/Robin_nano35.bin
# Copy the file out/Robin_nano35.bin to an SD card and then restart the
# printer with that SD card.
#Special thanks to the klipper project team and the flsun V400 facebook group here
#Pad-Vol:1.2
#2023-01-10

####################################################################################################
#motor part
####################################################################################################
[stepper_a]
step_pin: PE3
dir_pin: PE2  # motor direction pin,"!PE2" and "PE2" represent different directions
enable_pin: !PE4
microsteps: 16 
rotation_distance: 40 #rotation_distance = <full_steps_per_rotation> * <microsteps> / <steps_per_mm>, 
endstop_pin: ^PA15
#position_endstop: 415 # printer printable height
homing_speed: 40 
#arm_length = 345 

[stepper_b]
step_pin: PE0
dir_pin: PB9  # motor direction pin
enable_pin: !PE1
microsteps: 16
rotation_distance: 40
endstop_pin: ^PA12
#position_endstop: 415
#arm_length = 345

[stepper_c]
step_pin: PB5
dir_pin: PB4  # motor direction pin
enable_pin: !PB8
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC4
#position_endstop: 415
#arm_length = 345

[extruder]
step_pin: PD6
dir_pin: !PD3
enable_pin: !PB3
microsteps: 16
rotation_distance: 4.546
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PC3
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC1
min_temp: -5 # extruder min temp
max_temp: 315 # extruder max temp
max_extrude_cross_section: 50 # default 0.640
max_extrude_only_distance: 500
# pressure_advance: 0.02 
pressure_advance: 0.03
pressure_advance_smooth_time: 0.01
control = pid
pid_kp = 18.240
pid_ki = 0.558
pid_kd = 149.109

[tmc2209 stepper_a]
uart_pin: PD5
run_current: 1.500
hold_current: 0.500 # motor hold current
stealthchop_threshold: 999999

[tmc2209 stepper_b]
uart_pin: PD7
run_current: 1.500
hold_current: 0.500 # motor hold current
stealthchop_threshold: 999999

[tmc2209 stepper_c]
uart_pin: PD4
run_current: 1.500
hold_current: 0.500 # motor hold current
stealthchop_threshold: 999999

[tmc2209 extruder]
uart_pin: PD9
run_current: 0.900
hold_current: 0.500
stealthchop_threshold: 999999

####################################################################################################
#mcu ,pin
####################################################################################################
[mcu]
serial: /dev/serial/by-path/platform-5200000.ehci1-controller-usb-0:1.4:1.0-port0

restart_method: command

[fan]
pin: PB1

[heater_fan heat_sink_fan] 
pin: PB0
heater_temp: 90.0

[heater_bed]
heater_pin: PA0
sensor_pin: PC0
sensor_type: EPCOS 100K B57560G104F
min_temp: -5
max_temp: 120 #hotbed max temp
control = pid
pid_kp = 80.041
pid_ki = 2.422
pid_kd = 300.123

[temperature_sensor Armv7 mcu] #the temp of pad
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor mcu_temp] #the temp of mcu
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

[input_shaper]
shaper_freq_x: 49.4 
shaper_type_x: mzv  # frequency for the X mark of the test model
shaper_freq_y: 48.6 
shaper_type_y: mzv # frequency for the Y mark of the test model



[output_pin LED_pin]
pin: PE12
pwm: False
# value: 0 #default 0 = off ,1 = on; set value to 0 for printhead lights to be off by default
value: 1 # 0 = off ,1 = on; set value to 1 for printhead lights to be on by default
#cycle_time: 0.010

[output_pin LED_logo]
pin: PD11
pwm: False
# value: 1 # 0 = off ,1 = on; set value to 1 for logo lights to be on by default
value: 0 # 0 = off ,1 = on; set value to 1 for logo lights to be on by default
#cycle_time: 0.010

[filament_switch_sensor filament_sensor]  
pause_on_runout: True
runout_gcode: PAUSE # pause when filament runout
#insert_gcode: RESUME  
switch_pin: PA4

[printer]
kinematics: delta
max_velocity: 400 #max print speed ,default is 400mm/s
max_accel: 4700 
max_accel_to_decel: 5000  
square_corner_velocity: 5 
max_z_velocity: 400 
#delta_radius: 161.75 # delta radius,default is 161.75
print_radius: 152 #max printable radius 150,set it to 152 to avoid error "out of range"
minimum_z_position=-5 #min z position nozzle won't go to the position which Z lower the vaule

################################################################################################################
#calibrate and bed_mesh
################################################################################################################
[delta_calibrate]
radius: 148
horizontal_move_z: 23 #This value is related to the lift height of the nozzle during delta_calibrate
Speed: 50

[probe]  
pin: !PA11
x_offset: 0 
y_offset: 0 
z_offset: 16 #the distance between nozzle and level switch
speed: 4  
samples: 5 #probe one point three times get an average
samples_result: average  
sample_retract_dist: 3 
samples_tolerance: 0.02 # precision
samples_tolerance_retries: 5 

# [bed_mesh]  
# speed: 120 
# horizontal_move_z: 23 #This value is related to the lift height of the nozzle during bed_mesh
# mesh_radius: 148  
# mesh_origin: 0,0
# mesh_pps: 0, 0
# round_probe_count: 35 # 25*25
# algorithm: bicubic


[bed_mesh]
speed: 80
horizontal_move_z: 23
mesh_radius: 147
mesh_origin: 0,0
mesh_pps: 2,2
round_probe_count: 35 # 25*25
algorithm: bicubic
bicubic_tension: 0.1
split_delta_z: .025
#fade_start: 1
#fade_end: 30

#############################################################################################################
#GCODE
#############################################################################################################
[gcode_macro led_on]
gcode:
  SET_PIN PIN=LED_pin VALUE=1

[gcode_macro led_off]
gcode:
  SET_PIN PIN=LED_pin VALUE=0

[gcode_macro logo_on]
gcode:
  SET_PIN PIN=LED_logo VALUE=1

[gcode_macro logo_off]
gcode:
  SET_PIN PIN=LED_logo VALUE=0

[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.025 MOVE=1

[gcode_macro ZDOWN]
gcode:
   SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1

[gcode_macro bed_level_1]
gcode:
  SET_GCODE_OFFSET Z=0
  G28
  delta_calibrate
  G1 X0 Y0 Z50 F4200
  G28
  save_config

[gcode_macro bed_level_2]
gcode:
  G28
  G1 X0 Y0 Z50 F4200
  bed_mesh_calibrate
  G1 X0 Y0 Z50 F4200
  G28
  save_config

[gcode_macro UNLOAD_FILAMENT] #unload filament
gcode:
    G91
#    G1 E10 F300
    G1 E-100 F800
    G90

[gcode_macro LOAD_FILAMENT] #load filament
gcode:
    G91
    G1 E50 F800
    G1 E30 F300
    G90
    
[gcode_macro M600]
gcode:
  PAUSE
  
[gcode_macro TMC]
gcode:
  DUMP_TMC STEPPER=stepper_a
  DUMP_TMC STEPPER=stepper_b
  DUMP_TMC STEPPER=stepper_c
  DUMP_TMC STEPPER=extruder
  


[gcode_macro save_time]
gcode:
    {% if printer.save_variables.variables.total_time %}
        {% set print_time = printer.save_variables.variables.total_time %}
    {% else %} 
        {% set print_time = 0 %}
    {% endif %}
    {% set print_time = print_time + printer.print_stats.print_duration/3600 %}
    SAVE_VARIABLE VARIABLE=total_time VALUE={print_time}

[gcode_macro SET_GCODE_OFFSET]  
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}
    {% else %} 
        {% set offsets = {'x': None,'y': None,'z': None} %}
    {% endif %}
    
    {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}
    
    _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}

    {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X}) %}{% endif %}
    {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y}) %}{% endif %}
    {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
    {%if 'Z_ADJUST' in params %}
        {%if ns.offsets.z == None %}{% set null = ns.offsets.update({'z': 0}) %}{% endif %}
        {% set null = ns.offsets.update({'z': (ns.offsets.z | float) + (params.Z_ADJUST | float)}) %}
    {% endif %}
    SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"

[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:  
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}

        _SET_GCODE_OFFSET {% for axis, offset in offsets.items() if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}

        { action_respond_info("Loaded gcode offsets from saved variables [%s]" % (offsets)) }
    {% endif %}|

[idle_timeout]
gcode:
#   A list of G-Code commands to execute on an idle timeout. See
#   docs/Command_Templates.md for G-Code format. The default is to run
#   "TURN_OFF_HEATERS" and "M84".
timeout: 172800
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.

####################################################################################################################################
#PAUSE ,RESUME ,CANCEL_PRINT
####################################################################################################################################
[pause_resume]

[gcode_macro PAUSE] 
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(0) %}      #edit to your park position
    {% set y = params.Y|default(-140) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro RESUME]  
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% if printer["filament_switch_sensor filament_sensor"].filament_detected == True %} # detect if occur filament runout ,True : filament exists.  False:filament runout
      {% set e = params.E|default(1) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
      {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
      {%else %}
        {% set get_params = "" %}
      {% endif %}
    ##### end of definitions #####
      G91
      {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E{e} F2100
      {% else %}
        {action_respond_info("Extruder not hot enough")}
      {% endif %}   
      RESUME_BASE {get_params}
    {% endif %} 

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  M106 S0
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  G28

###########################################################################################################################
###########################################################################################################################
[virtual_sdcard]
path: ~/gcode_files

[save_variables]
filename: ~/savedVariables1.cfg
   
[gcode_arcs]

[display_status]

[verify_heater extruder]
max_error: 500
hysteresis: 20


#[include adxl345.cfg] # load ADXL345 module ,Uncomment it before using ADXL345

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

# EXP1 / EXP2 (display) pins
#[board_pins]
#aliases:
    # EXP1 header
#    EXP1_1=PC1, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,
#    EXP1_2=PC3, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,
    # EXP2 header
#    EXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,
#    EXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>

############################################################################################################################
############################################################################################################################

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [printer]
#*# delta_radius = 161.75
#*#
#*# [stepper_a]
#*# angle = 210.0
#*# arm_length = 345.000000
#*# position_endstop = 418.454873
#*#
#*# [stepper_b]
#*# angle = 330.0
#*# arm_length = 345.000000
#*# position_endstop = 418.175622
#*#
#*# [stepper_c]
#*# angle = 90.000000
#*# arm_length = 345.000000
#*# position_endstop = 417.042129
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870, 0.310870
#*# 	  0.377338, 0.377338, 0.377338, 0.377338, 0.377338, 0.377338, 0.377338, 0.377338, 0.377338, 0.377338, 0.377338, 0.377338, 0.377338, 0.316451, 0.313907, 0.297893, 0.283542, 0.314768, 0.294117, 0.319801, 0.325521, 0.361469, 0.396071, 0.396071, 0.396071, 0.396071, 0.396071, 0.396071, 0.396071, 0.396071, 0.396071, 0.396071, 0.396071, 0.396071, 0.396071
#*# 	  0.547941, 0.547941, 0.547941, 0.547941, 0.547941, 0.547941, 0.547941, 0.547941, 0.547941, 0.547941, 0.387440, 0.265256, 0.259794, 0.279579, 0.274732, 0.299118, 0.310946, 0.279780, 0.298145, 0.328561, 0.361333, 0.360717, 0.383310, 0.409185, 0.424013, 0.447849, 0.447849, 0.447849, 0.447849, 0.447849, 0.447849, 0.447849, 0.447849, 0.447849, 0.447849
#*# 	  0.348851, 0.348851, 0.348851, 0.348851, 0.348851, 0.348851, 0.348851, 0.348851, 0.348851, 0.340030, 0.306988, 0.318638, 0.262634, 0.275985, 0.312947, 0.298663, 0.298782, 0.299422, 0.281582, 0.301138, 0.279016, 0.295716, 0.361132, 0.350377, 0.342353, 0.359318, 0.396218, 0.396218, 0.396218, 0.396218, 0.396218, 0.396218, 0.396218, 0.396218, 0.396218
#*# 	  0.299623, 0.299623, 0.299623, 0.299623, 0.299623, 0.299623, 0.299623, 0.299623, 0.260136, 0.268401, 0.259745, 0.215366, 0.242698, 0.241692, 0.269989, 0.267041, 0.249312, 0.285338, 0.278103, 0.278270, 0.314685, 0.333414, 0.334964, 0.355684, 0.364723, 0.385478, 0.418477, 0.476421, 0.476421, 0.476421, 0.476421, 0.476421, 0.476421, 0.476421, 0.476421
#*# 	  0.381564, 0.381564, 0.381564, 0.381564, 0.381564, 0.381564, 0.363747, 0.368103, 0.329653, 0.322278, 0.283811, 0.277362, 0.228859, 0.250525, 0.245770, 0.274440, 0.259316, 0.223044, 0.246506, 0.248820, 0.217344, 0.254460, 0.263717, 0.274063, 0.291683, 0.277400, 0.322519, 0.348331, 0.384194, 0.466894, 0.466894, 0.466894, 0.466894, 0.466894, 0.466894
#*# 	  0.315137, 0.315137, 0.315137, 0.315137, 0.315137, 0.315137, 0.245642, 0.268123, 0.233086, 0.241364, 0.231514, 0.223589, 0.172728, 0.213306, 0.227502, 0.208533, 0.207603, 0.221587, 0.207501, 0.237838, 0.248110, 0.270818, 0.278101, 0.284256, 0.275430, 0.344385, 0.340448, 0.379509, 0.415751, 0.439088, 0.439088, 0.439088, 0.439088, 0.439088, 0.439088
#*# 	  0.437642, 0.437642, 0.437642, 0.437642, 0.437642, 0.382204, 0.346715, 0.309585, 0.271172, 0.280621, 0.224724, 0.208272, 0.187884, 0.190824, 0.197159, 0.188975, 0.206074, 0.189411, 0.187407, 0.201021, 0.188785, 0.217552, 0.236340, 0.230325, 0.225095, 0.252649, 0.268301, 0.254623, 0.288521, 0.303291, 0.345857, 0.345857, 0.345857, 0.345857, 0.345857
#*# 	  0.431690, 0.431690, 0.431690, 0.431690, 0.317505, 0.279157, 0.253952, 0.227558, 0.201445, 0.180344, 0.182839, 0.138018, 0.126524, 0.124835, 0.151577, 0.161365, 0.160504, 0.137490, 0.168034, 0.167872, 0.223140, 0.229133, 0.236772, 0.263674, 0.240666, 0.285290, 0.336257, 0.362109, 0.361672, 0.373134, 0.393499, 0.377287, 0.377287, 0.377287, 0.377287
#*# 	  0.539433, 0.539433, 0.539433, 0.493188, 0.394454, 0.348878, 0.289729, 0.241610, 0.240791, 0.219415, 0.176433, 0.182515, 0.153152, 0.131464, 0.127495, 0.156948, 0.155879, 0.134991, 0.158065, 0.164757, 0.175358, 0.160555, 0.182873, 0.154776, 0.171424, 0.204442, 0.211035, 0.262285, 0.287616, 0.222944, 0.237611, 0.191302, 0.277805, 0.277805, 0.277805
#*# 	  0.412744, 0.412744, 0.412744, 0.347131, 0.260751, 0.232044, 0.210516, 0.199200, 0.147937, 0.128151, 0.104052, 0.110378, 0.083583, 0.070221, 0.085299, 0.089369, 0.124464, 0.100812, 0.130594, 0.133859, 0.181862, 0.163273, 0.207037, 0.196035, 0.199421, 0.225113, 0.272754, 0.283103, 0.329130, 0.335140, 0.314606, 0.330012, 0.341213, 0.341213, 0.341213
#*# 	  0.459019, 0.459019, 0.459019, 0.390945, 0.333926, 0.293922, 0.248961, 0.203068, 0.182634, 0.163539, 0.137846, 0.118224, 0.093826, 0.079045, 0.069781, 0.092362, 0.085738, 0.089205, 0.085453, 0.123252, 0.124974, 0.157731, 0.124491, 0.173474, 0.113221, 0.134460, 0.180509, 0.198799, 0.183281, 0.189623, 0.175017, 0.163504, 0.206622, 0.206622, 0.206622
#*# 	  0.443456, 0.443456, 0.335240, 0.269118, 0.225113, 0.174573, 0.168293, 0.139880, 0.111182, 0.081780, 0.076203, 0.046326, 0.056760, 0.060997, 0.036025, 0.061801, 0.036625, 0.074843, 0.073814, 0.123678, 0.117191, 0.134762, 0.150374, 0.151455, 0.199087, 0.212866, 0.265996, 0.311962, 0.291983, 0.305692, 0.271506, 0.267830, 0.281578, 0.316646, 0.316646
#*# 	  0.470366, 0.470366, 0.390711, 0.321209, 0.276928, 0.229704, 0.215041, 0.162597, 0.149963, 0.079044, 0.080945, 0.070037, 0.040359, 0.038638, 0.022067, 0.024867, 0.012235, 0.035905, 0.036925, 0.074248, 0.090155, 0.094057, 0.106494, 0.138569, 0.124202, 0.127864, 0.179818, 0.209698, 0.186393, 0.173836, 0.146794, 0.130664, 0.129360, 0.197886, 0.197886
#*# 	  0.360105, 0.360105, 0.291017, 0.237206, 0.200401, 0.152374, 0.118324, 0.097271, 0.079120, 0.038248, 0.036612, 0.009634, -0.019594, 0.004905, 0.007178, -0.006914, -0.002682, -0.013388, 0.024510, 0.034971, 0.086816, 0.083685, 0.146391, 0.148910, 0.183011, 0.235888, 0.225264, 0.251788, 0.266767, 0.250907, 0.264357, 0.258393, 0.262350, 0.264963, 0.264963
#*# 	  0.422412, 0.422412, 0.349534, 0.295749, 0.253087, 0.207281, 0.139538, 0.113014, 0.109874, 0.069031, 0.034838, -0.010241, -0.004719, -0.027214, -0.018596, -0.021034, -0.025879, -0.027791, -0.026184, 0.022811, 0.039026, 0.068668, 0.088184, 0.102774, 0.119933, 0.152284, 0.171520, 0.180329, 0.198957, 0.181735, 0.157083, 0.109766, 0.126813, 0.136386, 0.136386
#*# 	  0.326609, 0.326609, 0.245551, 0.224425, 0.126644, 0.090153, 0.064747, 0.066005, 0.028097, -0.015272, -0.027787, -0.069469, -0.035861, -0.025792, -0.064134, -0.060471, -0.057877, -0.052702, -0.012887, -0.002111, 0.032464, 0.067830, 0.089665, 0.111895, 0.153984, 0.187601, 0.249925, 0.271885, 0.251016, 0.236894, 0.233529, 0.221442, 0.242679, 0.258680, 0.258680
#*# 	  0.428856, 0.343026, 0.313668, 0.273058, 0.175375, 0.167533, 0.089646, 0.086241, 0.050253, 0.006877, -0.004554, -0.024096, -0.036651, -0.035232, -0.050938, -0.061936, -0.038431, -0.075792, -0.051054, -0.040829, -0.004330, 0.049025, 0.041880, 0.074155, 0.091350, 0.137035, 0.172265, 0.158223, 0.153649, 0.150937, 0.134928, 0.144220, 0.135900, 0.139820, 0.250686
#*# 	  0.269309, 0.269309, 0.216873, 0.174616, 0.111146, 0.073591, 0.021913, 0.003244, -0.015545, -0.027382, -0.063419, -0.064989, -0.090494, -0.074588, -0.078171, -0.086516, -0.071599, -0.090235, -0.044394, -0.024820, 0.023669, 0.021745, 0.071597, 0.062135, 0.121235, 0.177296, 0.177107, 0.217077, 0.196634, 0.204884, 0.225297, 0.221098, 0.262908, 0.278229, 0.278229
#*# 	  0.326575, 0.326575, 0.247002, 0.190511, 0.135446, 0.113556, 0.048406, 0.055839, 0.017431, -0.002053, -0.048545, -0.053318, -0.049436, -0.061695, -0.086613, -0.090376, -0.088698, -0.079928, -0.042217, -0.045703, -0.031503, -0.003544, 0.010033, 0.031204, 0.046128, 0.093233, 0.112358, 0.127232, 0.133003, 0.118579, 0.134662, 0.157887, 0.168413, 0.297800, 0.297800
#*# 	  0.289635, 0.289635, 0.164070, 0.114513, 0.083803, 0.073641, 0.037271, 0.001573, -0.030676, -0.065333, -0.076968, -0.099008, -0.101412, -0.097050, -0.099958, -0.091023, -0.074064, -0.063134, -0.057486, -0.044850, -0.002972, 0.025052, 0.033299, 0.041360, 0.080438, 0.099724, 0.149028, 0.174203, 0.186925, 0.203776, 0.228667, 0.224551, 0.307796, 0.400665, 0.400665
#*# 	  0.289133, 0.289133, 0.232022, 0.173637, 0.136445, 0.113874, 0.069888, 0.046817, 0.036335, -0.013037, -0.042371, -0.082899, -0.084391, -0.079953, -0.087158, -0.087447, -0.072855, -0.076698, -0.068340, -0.046537, -0.039922, 0.006437, -0.000782, 0.059812, 0.056675, 0.072179, 0.094002, 0.129236, 0.124619, 0.124294, 0.144612, 0.208342, 0.263609, 0.387032, 0.387032
#*# 	  0.235609, 0.235609, 0.162500, 0.112114, 0.084546, 0.059183, 0.046386, -0.021954, -0.012151, -0.044838, -0.075157, -0.103154, -0.102156, -0.109101, -0.093163, -0.093601, -0.069979, -0.067434, -0.040232, -0.043317, 0.010126, 0.025715, 0.041422, 0.082743, 0.101353, 0.113077, 0.160538, 0.173024, 0.206813, 0.241285, 0.254300, 0.287467, 0.360592, 0.467497, 0.467497
#*# 	  0.211355, 0.211355, 0.211355, 0.158162, 0.121504, 0.071645, 0.050774, 0.018862, -0.022518, -0.009819, -0.055771, -0.054367, -0.081248, -0.082947, -0.084261, -0.077219, -0.072752, -0.051026, -0.037754, -0.017103, -0.023740, 0.017383, 0.027433, 0.074094, 0.068422, 0.078145, 0.116739, 0.148205, 0.186558, 0.197221, 0.193786, 0.266167, 0.328626, 0.328626, 0.328626
#*# 	  0.179719, 0.179719, 0.179719, 0.141057, 0.114149, 0.059024, 0.039142, -0.010736, -0.029654, -0.049594, -0.062425, -0.052028, -0.063227, -0.077037, -0.067652, -0.062988, -0.075655, -0.053954, -0.040407, -0.013512, 0.000566, 0.033371, 0.089825, 0.071258, 0.140922, 0.148423, 0.199236, 0.262715, 0.275114, 0.307260, 0.311271, 0.347939, 0.387419, 0.387419, 0.387419
#*# 	  0.195984, 0.195984, 0.195984, 0.138626, 0.123684, 0.081342, 0.058723, 0.044143, 0.022686, 0.010950, 0.005830, -0.053194, -0.061408, -0.043721, -0.046081, -0.063477, -0.045334, -0.046901, -0.006937, -0.000286, 0.017330, 0.056734, 0.061975, 0.062245, 0.105126, 0.146525, 0.185118, 0.217017, 0.259912, 0.276198, 0.300169, 0.348827, 0.415512, 0.415512, 0.415512
#*# 	  0.157131, 0.157131, 0.157131, 0.157131, 0.086313, 0.075263, 0.044333, 0.007427, 0.014923, -0.034035, -0.062981, -0.005603, -0.045076, -0.010966, -0.052260, -0.035604, -0.020252, -0.009762, 0.014499, 0.023900, 0.058840, 0.083257, 0.104460, 0.136256, 0.159928, 0.184738, 0.238036, 0.286250, 0.344430, 0.381301, 0.425792, 0.436313, 0.436313, 0.436313, 0.436313
#*# 	  0.165876, 0.165876, 0.165876, 0.165876, 0.165876, 0.099259, 0.070997, 0.053568, 0.082539, 0.056454, 0.028252, -0.008904, -0.012162, -0.017945, 0.013495, 0.021827, 0.013099, 0.027517, 0.050357, 0.066820, 0.065386, 0.108525, 0.111653, 0.163022, 0.170208, 0.224653, 0.236721, 0.302332, 0.349185, 0.377599, 0.449823, 0.449823, 0.449823, 0.449823, 0.449823
#*# 	  0.092333, 0.092333, 0.092333, 0.092333, 0.092333, 0.092333, 0.087140, 0.074477, 0.050000, 0.027884, -0.005247, 0.003593, -0.009253, 0.038851, 0.017506, 0.039907, 0.056379, 0.072370, 0.095930, 0.108843, 0.136554, 0.142696, 0.177235, 0.210083, 0.222222, 0.254701, 0.349157, 0.360887, 0.442586, 0.502783, 0.502783, 0.502783, 0.502783, 0.502783, 0.502783
#*# 	  0.172729, 0.172729, 0.172729, 0.172729, 0.172729, 0.172729, 0.136537, 0.096984, 0.101029, 0.082847, 0.052997, 0.050454, 0.063175, 0.057673, 0.063554, 0.120250, 0.091484, 0.134400, 0.131391, 0.174173, 0.135387, 0.179803, 0.187387, 0.209259, 0.267387, 0.269468, 0.332585, 0.406031, 0.484429, 0.588960, 0.588960, 0.588960, 0.588960, 0.588960, 0.588960
#*# 	  0.161381, 0.161381, 0.161381, 0.161381, 0.161381, 0.161381, 0.161381, 0.161381, 0.141649, 0.116050, 0.083748, 0.077578, 0.079729, 0.074186, 0.119242, 0.140934, 0.153157, 0.171151, 0.178202, 0.196736, 0.245173, 0.238138, 0.263685, 0.313977, 0.308207, 0.351965, 0.418192, 0.497003, 0.497003, 0.497003, 0.497003, 0.497003, 0.497003, 0.497003, 0.497003
#*# 	  0.187664, 0.187664, 0.187664, 0.187664, 0.187664, 0.187664, 0.187664, 0.187664, 0.187664, 0.193633, 0.150491, 0.139774, 0.175138, 0.154029, 0.188676, 0.202817, 0.217778, 0.232211, 0.215773, 0.265990, 0.263065, 0.289923, 0.331957, 0.314370, 0.374145, 0.413245, 0.524758, 0.524758, 0.524758, 0.524758, 0.524758, 0.524758, 0.524758, 0.524758, 0.524758
#*# 	  0.226374, 0.226374, 0.226374, 0.226374, 0.226374, 0.226374, 0.226374, 0.226374, 0.226374, 0.226374, 0.201700, 0.172947, 0.192124, 0.216218, 0.215589, 0.223587, 0.259243, 0.287910, 0.284754, 0.313197, 0.342807, 0.379753, 0.403401, 0.405021, 0.440307, 0.501114, 0.501114, 0.501114, 0.501114, 0.501114, 0.501114, 0.501114, 0.501114, 0.501114, 0.501114
#*# 	  0.273743, 0.273743, 0.273743, 0.273743, 0.273743, 0.273743, 0.273743, 0.273743, 0.273743, 0.273743, 0.273743, 0.273743, 0.273743, 0.290485, 0.304105, 0.323088, 0.347713, 0.401646, 0.360028, 0.422720, 0.454085, 0.456125, 0.497853, 0.497853, 0.497853, 0.497853, 0.497853, 0.497853, 0.497853, 0.497853, 0.497853, 0.497853, 0.497853, 0.497853, 0.497853
#*# 	  0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821, 0.442821
#*# tension = 0.1
#*# min_x = -146.88
#*# algo = bicubic
#*# y_count = 35
#*# mesh_y_pps = 2
#*# min_y = -146.88
#*# x_count = 35
#*# max_y = 146.88
#*# mesh_x_pps = 2
#*# max_x = 146.88
#*#
#*# [input_shaper]
#*#
#*# [delta_calibrate]
#*# height0 = 16.0
#*# height0_pos = 32191.800,32174.800,32083.800
#*# height1 = 16.0
#*# height1_pos = 38580.000,38562.800,28874.000
#*# height2 = 16.0
#*# height2_pos = 31685.000,42223.000,31576.000
#*# height3 = 16.0
#*# height3_pos = 29091.000,37476.000,37385.000
#*# height4 = 16.0
#*# height4_pos = 31391.200,31374.200,38801.000
#*# height5 = 16.0
#*# height5_pos = 36525.000,29222.000,36416.000
#*# height6 = 16.0
#*# height6_pos = 40432.200,31480.200,31388.200
